# Omnibus Tests

Here, we use permutational analysis of varianve
(or [PERMANOVA](https://en.wikipedia.org/wiki/Permutational_analysis_of_variance))
to identify how much of the variation in the microbiome
is explainable by different bits of metadata.
BiobakeryUtils.jl uses RCall to call the R package [vegan](https://cran.r-project.org/web/packages/vegan/index.html)
for their implimentation.

```julia; echo=false; results="hidden"
ENV["GKSwstype"] = "100" # hide

using ECHOAnalysis
using DataFrames
using Microbiome
using Distances
using MultivariateStats
using StatsPlots
using CSV
using BiobakeryUtils

outpath, figures = notebookpaths!(6)
```

```julia
tax = load_taxonomic_profiles()
abt = abundancetable(tax)
relativeabundance!(abt)
dm = pairwise(BrayCurtis(), abt, dims=2)


samples = samplenames(abt)
subject_type = [startswith(s, "M") ? "Mother" : "Child" for s in samples]

perm = permanova(dm, subject_type)
perm[:feature] = "species"
perm[:variable] = "Subject Type"
randrows(perm)
```

This tells us that, when comparing all the samples, whether the sample
comes from a mom or a kid can explain ~3% of the variation,
and the result is significant (p < 0.001).
Technically, this p value is a bit anti-conservative,
since we have multiple samples per individual.
But that would take a bit of tweaking,
and we don't *really* need that number.

One way to demonstrate why this is a problem
is to look at how much of the variation is attributable to the subject ID.

```julia
metadata = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(abt)))

# need to convert subject IDs to `String` so it's not treated as continuous variable
p = permanova(dm, string.(metadata[:subject]))
```

Here, we can see that over 80% of variability is attributable to who the person is.
Which is to say that people are really different!
Because of this, the numbers from PERMANOVA tend to be small (1-5%),
but even small differences are interesting.

Now we'll concatenate this new PERMANOVA into the previous dataframe to keep stuff together.

```julia
p[:feature] = "species"
p[:variable] = "Subject ID"
perm = vcat(perm, p)
```
## Kids metadata PERMANOVAs

Now we'll focus on the kids.

```julia
kids = view(abt, sites=firstkids(samplenames(abt)))
kids_dm = pairwise(BrayCurtis(), kids, dims=2)

kidsmeta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(kids)))

p = permanova(kids_dm, kidsmeta[:correctedAgeDays], filter=.!ismissing.(kidsmeta[:correctedAgeDays]))
p[:feature] = "species"
p[:variable] = "Age"
perm = vcat(perm, p)

kidsmeta[:birthType] = Vector{Union{Missing,String}}(kidsmeta[:birthType])
p = permanova(kids_dm, kidsmeta[:birthType], filter=.!ismissing.(kidsmeta[:birthType]))
p[:feature] = "species"
p[:variable] = "birthType"
perm = vcat(perm, p)

kidsmeta[:breastfed] = breastfeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta[:breastfed])
p[:feature] = "species"
p[:variable] = "breastfed"
perm = vcat(perm, p)

kidsmeta[:formulafed] = formulafeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta[:formulafed])
p[:feature] = "species"
p[:variable] = " lafed"
perm = vcat(perm, p)

kidsmeta[:childGender] = Vector{Union{Missing,String}}(kidsmeta[:childGender])
p = permanova(kids_dm, kidsmeta[:childGender], filter=.!ismissing.(kidsmeta[:childGender]))
p[:feature] = "species"
p[:variable] = "childGender"
perm = vcat(perm, p)

p = permanova(kids_dm, kidsmeta[:motherSES], filter=.!ismissing.(kidsmeta[:motherSES]))
p[:feature] = "species"
p[:variable] = "motherSES"
perm = vcat(perm, p);

filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)

perm
```

### Young kids

It's a bit surprising that breastfeeding and birth type are not significant,
though it may be because we're including older kids.
What happens if we only look at the kids under 2 years old?

```julia
young = map(a-> !ismissing(a) && a < 365*2, kidsmeta[:correctedAgeDays])
youngkids = view(kids, sites=young)
youngkids_dm = pairwise(BrayCurtis(), youngkids, dims=2)
youngkidsmeta = kidsmeta[young, :]

p = permanova(youngkids_dm, youngkidsmeta[:breastfed])
p[:feature] = "species"
p[:variable] = "young kids breastfed"
perm = vcat(perm, p)

p = permanova(youngkids_dm, youngkidsmeta[:formulafed])
p[:feature] = "species"
p[:variable] = "young kids formulafed"
perm = vcat(perm, p)

filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)

perm[end-1:end, :]
```

Still not significant.
It could be that we don't have enough young kids to see the effect,
or that for some reason,
this cohort doesn't have major differences based on these factors.

### Brain Data

All of the brain volume data is really affected by the age of the kids,
so we need to subtract out that variation.
BiobakeryUtils can't handle this yet, so we need to do this directly using RCall.

```julia
using RCall

filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:white_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :white_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ white_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
```

The second row is the white_matter_volume.

```julia
p[:feature] = "species"
p[:variable] = "white_matter_volume"
perm = vcat(perm, p[[2],:])
```

Let's look at some other brain measures.

```julia
## grey matter
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:grey_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :grey_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ grey_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[:feature] = "species"
p[:variable] = "grey_matter_volume"
perm = vcat(perm, p[[2],:])

## CSF
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:csf_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :csf_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ csf_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[:feature] = "species"
p[:variable] = "csf_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## Cognitive Assessment

using Statistics
# Bayleys doesn't have a compositve score calculated, but we can get it:
kidsmeta[:bayleysComposite] = map(row->
    mean([row[:languageComposite], row[:motorComposite]]),
    eachrow(kidsmeta))

# pre-fill columns for numerical score and name of the measurement test
kidsmeta[:cogScore] = Vector{Union{Float64,Missing}}(missing, size(kidsmeta,1))
kidsmeta[:cogAssessment] = Vector{Union{String,Missing}}(missing, size(kidsmeta,1))

map(enumerate(eachrow(kidsmeta))) do (i, row)
    # get just the cognitive assessment columns
    cogs = row[[
                :mullen_EarlyLearningComposite,
                :fullScaleComposite, # this is from WSSPI
                :FSIQ_Composite, # this is from WISC
                :bayleysComposite
            ]]
    # if there's no score, skip row
    all(ismissing, cogs) && return
    # otherwise, get the first non-missing value (no timepoints have multiple scores)
    col = findall(!ismissing, cogs)
    let assessment = col[1]
        if assessment == :mullen_EarlyLearningComposite
            assessment = "Mullen"
        elseif assessment == :fullScaleComposite
            assessment = "WSSPI"
        elseif assessment == :FSIQ_Composite
            assessment = "WISC"
        else assessment == :bayleysComposite
            assessment = "Bayleys"
        end

        kidsmeta[i, :cogAssessment] = assessment
        kidsmeta[i, :cogScore] = cogs[col[1]]
    end
end

p = permanova(kids_dm, kidsmeta[:cogScore], filter=.!ismissing.(kidsmeta[:cogScore]))
p[:feature] = "species"
p[:variable] = "cogScore"
perm = vcat(perm, p[[1],:])
```

Let's save the output after correcting for multiple testing.

```julia
using MultipleTesting

perm[:p_value] = Float64.(perm[Symbol("Pr(>F)")])
perm[:q_value] = adjust(perm[:p_value], BenjaminiHochberg())
sort!(perm, :q_value)

# reorder columns
perm = perm[[:feature, :variable, :R2, :p_value, :q_value]]

CSV.write(joinpath(outpath, "permanovas.csv"), perm)
```

Let's see what that looks like in graphical form using StatsPlots

```julia
sort!(perm, [:R2])

# [1:end-1] removes the ~80% from subject ID
bar(perm[1:end-1, :R2] .* 100,
    xticks=(1:(size(perm,1)-1), perm[1:end-1, :variable]),
    xrotation=45, color=:grey)

for i in eachindex(perm[:R2])
    r2 = perm[i, :R2] * 100
    q = perm[i, :q_value]
    kind = perm[:variable]
    if q > 0.05
        continue
    elseif q > 0.01
        stars = "*"
    elseif q > .001
        stars = "**"
    else
        stars = "***"
    end
    annotate!(i, r2+.2, text(stars, :center))
end

plot!(legend=false, title="Taxonomic Profiles PERMANOVA",
    ylabel="% Variance explainable")
```

```julia
savefig(joinpath(figures, "permanovas.svg"))
```
