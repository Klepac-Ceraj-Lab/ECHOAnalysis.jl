# Linear Models

Now that we've done omnibus tests,
it's time to look at per-feature tests with multivariate linear models.

```julia
cd(dirname(@__FILE__)) # hide
ENV["GKSwstype"] = "100" # hide

using ECHOAnalysis
using DataFrames
using PrettyTables
using Statistics
using Distances
using Microbiome
using MultivariateStats
using StatsPlots
using MicrobiomePlots
using BiobakeryUtils
using Clustering
using CSV

outpath, figures = notebookpaths!(@__FILE__)

tax = load_taxonomic_profiles()
taxfilter!(tax, :species)
abt = abundancetable(tax)
relativeabundance!(abt)
kids_abt = view(abt, sites=firstkids(samplenames(abt)))

focusmeta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(kids_abt)))
```

First, we'll use Maaslin2 from the huttenhower lab.
To do this, we need to first save the abundance table as a feature/sample table,
and the metadata we want to include in the model as a sample/feature table.

Maaslin2 doesn't play nice with missing categorical data,
so I'll manually remove samples that don't have `birthType` information

```julia
species = DataFrame(species=speciesnames(kids_abt))

let occ = occurrences(kids_abt)
    for (i, sample) in enumerate(samplenames(kids_abt))
        ismissing(focusmeta[i, :birthType]) && continue
        # Make a column for each sample
        species[Symbol(sample)] = occ[:, i]
    end
end
```

Now we'll subset the metadata DataFrame to include a subset of the metadata.

```julia
# add a sample id column
focusmeta[:sample] = collect(samplenames(kids_abt))
focusmeta[:breastfed] = breastfeeding.(eachrow(focusmeta))
filter!(row-> !ismissing(row[:birthType]), focusmeta)

# view() does not create a new dataframe, but allows us to subset it.
whitematterdf = view(focusmeta, [:sample, :white_matter_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])

# Maaslin2 also wants tab separated values
CSV.write(joinpath(outpath, "kids_species_abundance.tsv"), delim='\t', species)
CSV.write(joinpath(outpath, "kids_white_matter.tsv"), delim='\t', whitematterdf)
```

Now, we'll run Maaslin2. from the commandline.
You need to have Maaslin2 installed for this to work - [see here](https://bitbucket.org/biobakery/maaslin2/src/default/#markdown-header-installation)

```julia
using RCall

R"library(Maaslin2)"
let version = R"packageVersion('Maaslin2')"
    @show version
end
```

```julia
R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_species_abundance.tsv")),
            $(joinpath(outpath, "kids_white_matter.tsv")),
            $(joinpath(outpath, "species__wm_age_ses_bf_birth")))
"""
```

We can do this with some other brain data as well:


```julia
greymatterdf = view(focusmeta, [:sample, :grey_matter_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_grey_matter.tsv"), delim='\t', greymatterdf)

R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_species_abundance.tsv")),
            $(joinpath(outpath, "kids_grey_matter.tsv")),
            $(joinpath(outpath, "species__gm_age_ses_bf_birth")))
"""

csfdf = view(focusmeta, [:sample, :csf_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_csf.tsv"), delim='\t', csfdf)

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_species_abundance.tsv")),
             $(joinpath(outpath, "kids_csf.tsv")),
             $(joinpath(outpath, "species__csf_age_ses_bf_birth")))
"""
```

## Cognitive Assessments

There are a number of age-appropriate cognitive assessments
that our collaborators are collecting for the kids.
All of these have been normalized in a similar way to IQ,
that is, they are scaled to the mean (100) and standard deviation (10)
of the population of kids that age.

- Mullen is for kids < 4 years old
- Bayley's is used for some kids under 2 years old
- WSSPI is for 4yo <= kids < 6yo
- WISC is for kids older than 6

So we'll create a new column that contains the composite score
for each kids, regardless of which version of the test they took.

```julia
# Bayleys doesn't have a compositve score calculated, but we can get it:
focusmeta[:bayleysComposite] = map(row->
    mean([row[:languageComposite], row[:motorComposite]]),
    eachrow(focusmeta))

focusmeta[:cogScore] = Vector{Union{Float64,Missing}}(missing, size(focusmeta,1))
focusmeta[:cogAssessment] = Vector{Union{String,Missing}}(missing, size(focusmeta,1))

map(enumerate(eachrow(focusmeta))) do (i, row)
    # get just the cognitive assessment columns
    cogs = row[[
                :mullen_EarlyLearningComposite,
                :fullScaleComposite, # this is from WSSPI
                :FSIQ_Composite, # this is from WISC
                :bayleysComposite
            ]]
    # if there's no score, skip row
    all(ismissing, cogs) && return
    # otherwise, get the first non-missing value (no timepoints have multiple scores)
    col = findall(!ismissing, cogs)
    let assessment = col[1]
        if assessment == :mullen_EarlyLearningComposite
            assessment = "Mullen"
        elseif assessment == :fullScaleComposite
            assessment = "WSSPI"
        elseif assessment == :FSIQ_Composite
            assessment = "WISC"
        else assessment == :bayleysComposite
            assessment = "Bayleys"
        end

        focusmeta[i, :cogAssessment] = assessment
        focusmeta[i, :cogScore] = cogs[col[1]]
    end
end

describe(focusmeta[:cogScore])
describe(focusmeta[:cogAssessment])
```


```julia
@df focusmeta scatter(:correctedAgeDays ./ 365, :cogScore,
        group = map(a-> ismissing(a) ? "Missing" : a, :cogAssessment),
        legend = :bottomright, color=color1')
title!("Cognitive Assessment Composite Scores")
xlabel!("Age (years)")
ylabel!("Composite Score")

savefig(joinpath(figures, "cognitive-scores.svg")); nothing # hide
```

![](../../data/figures/07/cognitive-scores.svg)

```julia
cogdf = view(focusmeta, [:sample, :cogScore, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_cog.tsv"), delim='\t', cogdf)

R"""
Maaslin2(
     $(joinpath(outpath, "kids_species_abundance.tsv")),
     $(joinpath(outpath, "kids_cog.tsv")),
     $(joinpath(outpath, "species__cog_age_ses_bf_birth")))
"""

```
