# Parsing Brain Data

```@example brain
cd(dirname(@__FILE__)) # hide
ENV["GKSwstype"] = "100" # hideusing ECHOAnalysis
using ECHOAnalysis
using CSV
using DataFrames
using Pkg.TOML: parsefile
using Microbiome
using BiobakeryUtils

tables = parsefile("../../data/data.toml")["tables"]
figsdir = parsefile("../../data/data.toml")["figures"]["path"]
datafolder = tables["biobakery"]["path"]
metaphlan = tables["biobakery"]["metaphlan2"]

tax = merge_tables(datafolder, metaphlan["root"], metaphlan["filter"],
    suffix="_profile.tsv")

# clean up sample names
names!(tax,
    map(n-> Symbol(
        resolve_sampleID(String(n))[:sample]),
        names(tax)
        )
    )

taxfilter!(tax)
abt = abundancetable(tax)
relativeabundance!(abt)

kids = view(abt, sites=map(s-> occursin(r"^C", s[:sample]) && occursin("F", s[:sample]),
                    resolve_sampleID.(sitenames(abt))))

ktps = map(x-> (x.subject, x.timepoint), resolve_sampleID.(samplenames(kids)))
```


```@example metadata
cortical = CSV.read(tables["brain"]["cortical"]["path"])
subcortical = CSV.read(tables["brain"]["subcortical"]["path"])
vols = CSV.read(tables["brain"]["gross_volumes"]["path"])

cortical[:studyID] = getfield.(parseletterid.(cortical[:SubjID]), :subject)
cortical[:timepoint] = getfield.(parseletterid.(cortical[:SubjID]), :timepoint)

# we only care about a subset of values for now
cortical = cortical[[:studyID, :timepoint, :LThickness, :RThickness,
                                           :LSurfArea,  :RSurfArea,
                                           :ICV]]

# convert to longform
# cortical = melt(cortical, [:studyID, :timepoint], variable_name=:metadatum)
cortical[:parent_table] = "corticalVolumes"

# for the subcortex we mostly care about the total volume rather than individual values
subcortical[:subcortical_volume] = map(row-> sum(Vector(row[2:end-1])), eachrow(subcortical))
subcortical[:studyID] = getfield.(parseletterid.(subcortical[:SubjID]), :subject)
subcortical[:timepoint] = getfield.(parseletterid.(subcortical[:SubjID]), :timepoint)
subcortical = subcortical[[:studyID, :timepoint, :subcortical_volume]]

# convert to longform
# subcortical = melt(subcortical, [:studyID, :timepoint], variable_name=:metadatum)
subcortical[:parent_table] = "subcorticalVolumes"

vols[:studyID] = getfield.(parseletterid.(vols[Symbol("Study ID")]), :subject)
vols[:timepoint] = getfield.(parseletterid.(vols[Symbol("Study ID")]), :timepoint)



brainids = map(row-> (subject=row.studyID, timepoint=row.timepoint),
                eachrow(cortical))
volids = map(row-> (subject=row.studyID, timepoint=row.timepoint),
                eachrow(vols))


mgxids = map(s-> (subject=s.subject, timepoint=s.timepoint),
                resolve_sampleID.(samplenames(kids)))

setdiff(brainids, mgxids) |> length
setdiff(mgxids, brainids) |> length

setdiff(brainids, volids) |> length
setdiff(volids, brainids) |> length

setdiff(mgxids, volids) |> length
setdiff(volids, mgxids) |> length

intersect(brainids, mgxids) |> length

intersect(brainids, volids) |> length

intersect(mgxids, volids) |> length
```


```@example brain
using StatsBase

function colorquartile(arr, clrs)
    (q1, q2, q3) = percentile(collect(skipmissing(arr)), [25, 50, 75])
    length(clrs) > 4 ? mis = colorant"gray" : clrs[5]
    map(arr) do x
        ismissing(x) && return mis
        x < q1 && return clrs[1]
        x < q2 && return clrs[2]
        x < q3 && return clrs[3]
        return clrs[4]
    end
end
```
