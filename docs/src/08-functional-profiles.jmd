---
title: "Notebook 8: Functional Profiles"
author: "Kevin Bonham, PhD"
options:
    line_width : 120
    wrap : false
---

Now we've been through some analyses of the taxonomic profiles,
but metagenomes *also* allow the generation of functional profiles;
that is, what genes are present in a given community.

These profiles were generated with [HUMANn2](http://huttenhower.sph.harvard.edu/humann2).

```julia; echo=false; results="hidden"
using ECHOAnalysis
using Microbiome
using BiobakeryUtils
using StatsPlots
using DataFrames
using Distances
using CSV

(outpath, figures) = notebookpaths!(8)
```

## Gene Families

```julia
bakery = datatoml["tables"]["biobakery"]
humann2 = bakery["humann2"]

paths = String[]
for (root, dirs, files) in walkdir(bakery["path"])
    !occursin("humann2", root) && continue
    occursin("merged", root) && continue
    filter!(f-> occursin("genefamilies_relab", f), files)
    append!(paths, joinpath.(root, files))
end
paths[1:5]
```

```julia; results="hidden"
sort!(paths, lt=(x,y)-> split(x, "/")[end] < split(y, "/")[end])

function join_genefamilies(paths)
    df = DataFrame(col1=String[])
    n = length(paths)
    samples = Tuple[]
    for (i, p) in enumerate(paths)
        m = match(r"([CM]\d+)[\-_](\d)F[\-_](\d)([A-Z])", p)
        if m === nothing
            @warn "Couldn't find sample name for path" p
            continue
        else
            (subject, timepoint, replicate, aliquot) = m.captures
            if (subject, timepoint) in samples
                @info "skipping $(m.match), sample/timpoint already present"
                continue
            else
                push!(samples, (subject, timepoint))
            end
            m = Symbol(m.match)
        end
        @info "Loading $m ($i of $n)"
        gf = CSV.read(p, delim='\t')
        rename!(gf, [names(gf)[1] => :col1, names(gf)[2]=>m])
        gf = gf[map(row-> !occursin("unclassified", row[:col1]), eachrow(gf)), :]
        df = join(df, gf, on=:col1, kind=:outer)
    end
    for n in names(df[2:end])
        df[n] = coalesce.(df[n], 0.)
    end
    disallowmissing!(df)
    return df
end
```
```julia; results="hidden"
gf = join_genefamilies(paths)

gf = abundancetable(gf)
relativeabundance!(gf)
```

```julia
focusmeta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(gf)));
dm = pairwise(BrayCurtis(), gf, dims=2)
```

### Omnibus tests


```julia
perm = permanova(dm, [startswith(s, "M") ? "mom" : "kid" for s in samplenames(gf)])
perm[:feature] = "genefamilies"
perm[:variable] = "Subject Type"
```

```julia
kids = view(gf, sites=firstkids(samplenames(gf)))
kids_dm = pairwise(BrayCurtis(), kids, dims=2)

kidsmeta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(kids)))

p = permanova(kids_dm, kidsmeta[:correctedAgeDays], filter=.!ismissing.(kidsmeta[:correctedAgeDays]))
p[:feature] = "genefamilies"
p[:variable] = "Age"
perm = vcat(perm, p)

kidsmeta[:birthType] = Vector{Union{Missing,String}}(kidsmeta[:birthType])
p = permanova(kids_dm, kidsmeta[:birthType], filter=.!ismissing.(kidsmeta[:birthType]))
p[:feature] = "genefamilies"
p[:variable] = "birthType"
perm = vcat(perm, p)

kidsmeta[:breastfed] = breastfeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta[:breastfed])
p[:feature] = "genefamilies"
p[:variable] = "breastfed"
perm = vcat(perm, p)

kidsmeta[:formulafed] = formulafeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta[:formulafed])
p[:feature] = "genefamilies"
p[:variable] = "formulafed"
perm = vcat(perm, p)

kidsmeta[:childGender] = Vector{Union{Missing,String}}(kidsmeta[:childGender])
p = permanova(kids_dm, kidsmeta[:childGender], filter=.!ismissing.(kidsmeta[:childGender]))
p[:feature] = "genefamilies"
p[:variable] = "childGender"
perm = vcat(perm, p)

p = permanova(kids_dm, kidsmeta[:motherSES], filter=.!ismissing.(kidsmeta[:motherSES]))
p[:feature] = "genefamilies"
p[:variable] = "motherSES"
perm = vcat(perm, p);
```

```julia
young = map(a-> !ismissing(a) && a < 365*2, kidsmeta[:correctedAgeDays])
youngkids = view(kids, sites=young)
youngkids_dm = pairwise(BrayCurtis(), youngkids, dims=2)
youngkidsmeta = kidsmeta[young, :]

p = permanova(youngkids_dm, youngkidsmeta[:breastfed])
p[:feature] = "genefamilies"
p[:variable] = "young kids breastfed"
perm = vcat(perm, p)

p = permanova(youngkids_dm, youngkidsmeta[:formulafed])
p[:feature] = "genefamilies"
p[:variable] = "young kids formulafed"
perm = vcat(perm, p);
```

```julia
using RCall

filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:white_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :white_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ white_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]

p[:feature] = "genefamilies"
p[:variable] = "white_matter_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## grey matter
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:grey_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :grey_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ grey_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[:feature] = "genefamilies"
p[:variable] = "grey_matter_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## CSF
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:csf_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :csf_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ csf_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[:feature] = "genefamilies"
p[:variable] = "csf_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## Cognitive Assessment

using Statistics
# Bayleys doesn't have a compositve score calculated, but we can get it:
kidsmeta[:bayleysComposite] = map(row->
    mean([row[:languageComposite], row[:motorComposite]]),
    eachrow(kidsmeta))

kidsmeta[:cogScore] = Vector{Union{Float64,Missing}}(missing, size(kidsmeta,1))
kidsmeta[:cogAssessment] = Vector{Union{String,Missing}}(missing, size(kidsmeta,1))

map(enumerate(eachrow(kidsmeta))) do (i, row)
    # get just the cognitive assessment columns
    cogs = row[[
                :mullen_EarlyLearningComposite,
                :fullScaleComposite, # this is from WSSPI
                :FSIQ_Composite, # this is from WISC
                :bayleysComposite
            ]]
    # if there's no score, skip row
    all(ismissing, cogs) && return
    # otherwise, get the first non-missing value (no timepoints have multiple scores)
    col = findall(!ismissing, cogs)
    let assessment = col[1]
        if assessment == :mullen_EarlyLearningComposite
            assessment = "Mullen"
        elseif assessment == :fullScaleComposite
            assessment = "WSSPI"
        elseif assessment == :FSIQ_Composite
            assessment = "WISC"
        else assessment == :bayleysComposite
            assessment = "Bayleys"
        end

        kidsmeta[i, :cogAssessment] = assessment
        kidsmeta[i, :cogScore] = cogs[col[1]]
    end
end

p = permanova(kids_dm, kidsmeta[:cogScore], filter=.!ismissing.(kidsmeta[:cogScore]))
p[:feature] = "genefamilies"
p[:variable] = "cogScore"
perm = vcat(perm, p[[2],:])
```

```julia
using MultipleTesting

filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)

perm[:p_value] = Float64.(perm[Symbol("Pr(>F)")])
perm[:q_value] = adjust(perm[:p_value], BenjaminiHochberg())
sort!(perm, :q_value)

# reorder columns
perm = perm[[:feature, :variable, :R2, :p_value, :q_value]]
CSV.write(joinpath(outpath, "genefamilies_permanovas.csv"), perm)
```

```julia
using StatsPlots

sort!(perm, [:R2])

bar(perm[:R2] .* 100,
    xticks=(1:(size(perm,1)-1), perm[:variable]),
    xrotation=45, color=:grey)

for i in eachindex(perm[:R2])
    r2 = perm[i, :R2] * 100
    q = perm[i, :q_value]
    kind = perm[:variable]
    if q > 0.05
        continue
    elseif q > 0.01
        stars = "*"
    elseif q > .001
        stars = "**"
    else
        stars = "***"
    end
    annotate!(i, r2+.1, text(stars, :center))
end

plot!(legend=false, title="Function Profiles (gene families) PERMANOVA",
    ylabel="% Variance explainable")
```

```julia
savefig(joinpath(figures, "genefamilies_permanovas.svg"))
```

### Linear Models

Because there are so many gene functions,
we'll do some agressive filtering for
prevalence and abundance.

```julia
prevfilt = let occ = occurrences(kids)
    # at least 5% of samples have at least 0.0001% abundance
    [prevalence(occ[i, :], 1e-6) > 0.05 for i in 1:size(occ, 1)]
end

prev = view(kids, species=prevfilt)

gfdf = DataFrame(genefamily=featurenames(prev))

let occ = occurrences(prev)
    for (i, sample) in enumerate(samplenames(prev))
        ismissing(kidsmeta[i, :birthType]) && continue
        # Make a column for each sample
        gfdf[Symbol(sample)] = occ[:, i]
    end
end
```

```julia
# add a sample id column
kidsmeta[:sample] = collect(samplenames(prev))
filter!(row-> !ismissing(row[:birthType]), kidsmeta)

# view() does not create a new dataframe, but allows us to subset it.
whitematterdf = view(kidsmeta, [:sample, :white_matter_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])

# Maaslin2 also wants tab separated values
CSV.write(joinpath(outpath, "kids_gf_abundance.tsv"), delim='\t', gfdf)
CSV.write(joinpath(outpath, "kids_white_matter.tsv"), delim='\t', whitematterdf)
```

Now, we'll run Maaslin2.
You need to have Maaslin2 installed for this to work - [see here](https://bitbucket.org/biobakery/maaslin2/src/default/#markdown-header-installation)

```julia
using RCall

R"library(Maaslin2)"
let version = R"packageVersion('Maaslin2')"
    @show version
end;
```

```julia; results="hidden"
R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_gf_abundance.tsv")),
            $(joinpath(outpath, "kids_white_matter.tsv")),
            $(joinpath(outpath, "gf__wm_age_ses_bf_birth")))
"""
```

We can do this with some other brain data as well:


```julia; results="hidden"
greymatterdf = view(kidsmeta, [:sample, :grey_matter_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_grey_matter.tsv"), delim='\t', greymatterdf)

R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_gf_abundance.tsv")),
            $(joinpath(outpath, "kids_grey_matter.tsv")),
            $(joinpath(outpath, "gf__gm_age_ses_bf_birth")))
"""

csfdf = view(kidsmeta, [:sample, :csf_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_csf.tsv"), delim='\t', csfdf)

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_gf_abundance.tsv")),
             $(joinpath(outpath, "kids_csf.tsv")),
             $(joinpath(outpath, "gf__csf_age_ses_bf_birth")))
""";
```

#### Cognitive Assessments


```julia
# Bayleys doesn't have a compositve score calculated, but we can get it:
kidsmeta[:bayleysComposite] = map(row->
    mean([row[:languageComposite], row[:motorComposite]]),
    eachrow(kidsmeta))

kidsmeta[:cogScore] = Vector{Union{Float64,Missing}}(missing, size(kidsmeta,1))
kidsmeta[:cogAssessment] = Vector{Union{String,Missing}}(missing, size(kidsmeta,1))

map(enumerate(eachrow(kidsmeta))) do (i, row)
    # get just the cognitive assessment columns
    cogs = row[[
                :mullen_EarlyLearningComposite,
                :fullScaleComposite, # this is from WSSPI
                :FSIQ_Composite, # this is from WISC
                :bayleysComposite
            ]]
    # if there's no score, skip row
    all(ismissing, cogs) && return
    # otherwise, get the first non-missing value (no timepoints have multiple scores)
    col = findall(!ismissing, cogs)
    let assessment = col[1]
        if assessment == :mullen_EarlyLearningComposite
            assessment = "Mullen"
        elseif assessment == :fullScaleComposite
            assessment = "WSSPI"
        elseif assessment == :FSIQ_Composite
            assessment = "WISC"
        else assessment == :bayleysComposite
            assessment = "Bayleys"
        end

        kidsmeta[i, :cogAssessment] = assessment
        kidsmeta[i, :cogScore] = cogs[col[1]]
    end
end

describe(kidsmeta[:cogScore])
describe(kidsmeta[:cogAssessment])
```

```julia; results="hidden"
cogdf = view(kidsmeta, [:sample, :cogScore, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_cog.tsv"), delim='\t', cogdf)

R"""
Maaslin2(
     $(joinpath(outpath, "kids_gf_abundance.tsv")),
     $(joinpath(outpath, "kids_cog.tsv")),
     $(joinpath(outpath, "gf__cog_age_ses_bf_birth")))
""";

```



## Enzyme Classes

```julia
bakery = datatoml["tables"]["biobakery"]
humann2 = bakery["humann2"]

paths = String[]
for (root, dirs, files) in walkdir(bakery["path"])
    !occursin("humann2", root) && continue
    !occursin("merged", root) && continue
    filter!(f-> occursin(r"batch00[\d]_ecs_relab", f), files)
    append!(paths, joinpath.(root, files))
end
```

```julia; results="hidden"
sort!(paths, lt=(x,y)-> split(x, "/")[end] < split(y, "/")[end])

function join_ecs(paths)
    df = DataFrame(col1=String[])
    for p in paths
        gf = CSV.read(p, delim='\t')
        rename!(gf, names(gf)[1] => :col1)
        gf = gf[map(row-> !occursin("unclassified", row[:col1]), eachrow(gf)), :]
        df = join(df, gf, on=:col1, kind=:outer)
    end
    for n in names(df[2:end])
        df[n] = coalesce.(df[n], 0.)
    end
    disallowmissing!(df)
    names!(df, map(n-> replace(String(n), "_Abundance-RPKs"=>"") |> Symbol, names(df)))
    return df
end

ecs = join_ecs(paths)
ecs = deletecols!(ecs, map(n-> occursin("ABC-Beer", String(n)), names(ecs)))

ecs = abundancetable(ecs)
relativeabundance!(ecs)
```

```julia
focusmeta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(ecs)));
dm = pairwise(BrayCurtis(), ecs, dims=2)
```

### Omnibus tests


```julia
perm = permanova(dm, [startswith(s, "M") ? "mom" : "kid" for s in samplenames(ecs)])
perm[:feature] = "ECs"
perm[:variable] = "Subject Type"
```

```julia
kids = view(ecs, sites=firstkids(samplenames(ecs)))
kids_dm = pairwise(BrayCurtis(), kids, dims=2)

kidsmeta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(kids)))

p = permanova(kids_dm, kidsmeta[:correctedAgeDays], filter=.!ismissing.(kidsmeta[:correctedAgeDays]))
p[:feature] = "ECs"
p[:variable] = "Age"
perm = vcat(perm, p)

kidsmeta[:birthType] = Vector{Union{Missing,String}}(kidsmeta[:birthType])
p = permanova(kids_dm, kidsmeta[:birthType], filter=.!ismissing.(kidsmeta[:birthType]))
p[:feature] = "ECs"
p[:variable] = "birthType"
perm = vcat(perm, p)

kidsmeta[:breastfed] = breastfeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta[:breastfed])
p[:feature] = "ECs"
p[:variable] = "breastfed"
perm = vcat(perm, p)

kidsmeta[:formulafed] = formulafeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta[:formulafed])
p[:feature] = "ECs"
p[:variable] = "formulafed"
perm = vcat(perm, p)

kidsmeta[:childGender] = Vector{Union{Missing,String}}(kidsmeta[:childGender])
p = permanova(kids_dm, kidsmeta[:childGender], filter=.!ismissing.(kidsmeta[:childGender]))
p[:feature] = "ECs"
p[:variable] = "childGender"
perm = vcat(perm, p)

p = permanova(kids_dm, kidsmeta[:motherSES], filter=.!ismissing.(kidsmeta[:motherSES]))
p[:feature] = "ECs"
p[:variable] = "motherSES"
perm = vcat(perm, p);
```

```julia
young = map(a-> !ismissing(a) && a < 365*2, kidsmeta[:correctedAgeDays])
youngkids = view(kids, sites=young)
youngkids_dm = pairwise(BrayCurtis(), youngkids, dims=2)
youngkidsmeta = kidsmeta[young, :]

p = permanova(youngkids_dm, youngkidsmeta[:breastfed])
p[:feature] = "ECs"
p[:variable] = "young kids breastfed"
perm = vcat(perm, p)

p = permanova(youngkids_dm, youngkidsmeta[:formulafed])
p[:feature] = "ECs"
p[:variable] = "young kids formulafed"
perm = vcat(perm, p)
```

```julia
using RCall

filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:white_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :white_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ white_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]

p[:feature] = "ECs"
p[:variable] = "white_matter_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## grey matter
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:grey_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :grey_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ grey_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[:feature] = "ECs"
p[:variable] = "grey_matter_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## CSF
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:csf_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :csf_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ csf_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[:feature] = "ECs"
p[:variable] = "csf_volume"
perm = vcat(perm, p[[2],:])
```
```julia
## Cognitive Assessment

using Statistics
# Bayleys doesn't have a compositve score calculated, but we can get it:
kidsmeta[:bayleysComposite] = map(row->
    mean([row[:languageComposite], row[:motorComposite]]),
    eachrow(kidsmeta))

kidsmeta[:cogScore] = Vector{Union{Float64,Missing}}(missing, size(kidsmeta,1))
kidsmeta[:cogAssessment] = Vector{Union{String,Missing}}(missing, size(kidsmeta,1))

map(enumerate(eachrow(kidsmeta))) do (i, row)
    # get just the cognitive assessment columns
    cogs = row[[
                :mullen_EarlyLearningComposite,
                :fullScaleComposite, # this is from WSSPI
                :FSIQ_Composite, # this is from WISC
                :bayleysComposite
            ]]
    # if there's no score, skip row
    all(ismissing, cogs) && return
    # otherwise, get the first non-missing value (no timepoints have multiple scores)
    col = findall(!ismissing, cogs)
    let assessment = col[1]
        if assessment == :mullen_EarlyLearningComposite
            assessment = "Mullen"
        elseif assessment == :fullScaleComposite
            assessment = "WSSPI"
        elseif assessment == :FSIQ_Composite
            assessment = "WISC"
        else assessment == :bayleysComposite
            assessment = "Bayleys"
        end

        kidsmeta[i, :cogAssessment] = assessment
        kidsmeta[i, :cogScore] = cogs[col[1]]
    end
end

p = permanova(kids_dm, kidsmeta[:cogScore], filter=.!ismissing.(kidsmeta[:cogScore]))
p[:feature] = "ECs"
p[:variable] = "cogScore"
perm = vcat(perm, p);
```

```julia
using MultipleTesting

filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)

perm[:p_value] = Float64.(perm[Symbol("Pr(>F)")])
perm[:q_value] = adjust(perm[:p_value], BenjaminiHochberg())
sort!(perm, :q_value)

# reorder columns
perm = perm[[:feature, :variable, :R2, :p_value, :q_value]]
CSV.write(joinpath(outpath, "ecs_permanovas.csv"), perm)
```

```julia
using StatsPlots

sort!(perm, [:R2])

bar(perm[:R2] .* 100,
    xticks=(1:(size(perm,1)-1), perm[:variable]),
    xrotation=45, color=:grey)

for i in eachindex(perm[:R2])
    r2 = perm[i, :R2] * 100
    q = perm[i, :q_value]
    kind = perm[:variable]
    if q > 0.05
        continue
    elseif q > 0.01
        stars = "*"
    elseif q > .001
        stars = "**"
    else
        stars = "***"
    end
    annotate!(i, r2+.1, text(stars, :center))
end

plot!(legend=false, title="Function Profiles (ECs) PERMANOVA",
    ylabel="% Variance explainable")
```

```julia
savefig(joinpath(figures, "ecs_permanovas.svg"))
```

### Linear Models

Because there are so many gene functions,
we'll do some agressive filtering for
prevalence and abundance.

```julia
prevfilt = let occ = occurrences(kids)
    # at least 5% of samples have at least 0.0001% abundance
    [prevalence(occ[i, :], 1e-6) > 0.05 for i in 1:size(occ, 1)]
end

species=prevfilt)

ecdf = DataFrame(EC=featurenames(prev))

let occ = occurrences(prev)
    for (i, sample) in enumerate(samplenames(prev))
        ismissing(kidsmeta[i, :birthType]) && continue
        # Make a column for each sample
        ecdf[Symbol(sample)] = occ[:, i]
    end
end
```

```julia
# add a sample id column
kidsmeta[:sample] = collect(samplenames(prev))
filter!(row-> !ismissing(row[:birthType]), kidsmeta)

# view() does not create a new dataframe, but allows us to subset it.
whitematterdf = view(kidsmeta, [:sample, :white_matter_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])

# Maaslin2 also wants tab separated values
CSV.write(joinpath(outpath, "kids_ec_abundance.tsv"), delim='\t', gfdf)
CSV.write(joinpath(outpath, "kids_white_matter.tsv"), delim='\t', whitematterdf)
```

Now, we'll run Maaslin2.
You need to have Maaslin2 installed for this to work - [see here](https://bitbucket.org/biobakery/maaslin2/src/default/#markdown-header-installation)

```julia
using RCall

R"library(Maaslin2)"
let version = R"packageVersion('Maaslin2')"
    @show version
end;
```

```julia; results="hidden"
R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_ec_abundance.tsv")),
            $(joinpath(outpath, "kids_white_matter.tsv")),
            $(joinpath(outpath, "ec__wm_age_ses_bf_birth")))
"""
```

We can do this with some other brain data as well:


```julia; results="hidden"
greymatterdf = view(kidsmeta, [:sample, :grey_matter_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_grey_matter.tsv"), delim='\t', greymatterdf)

R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_ec_abundance.tsv")),
            $(joinpath(outpath, "kids_grey_matter.tsv")),
            $(joinpath(outpath, "ec__gm_age_ses_bf_birth")))
"""

csfdf = view(kidsmeta, [:sample, :csf_volume, :correctedAgeDays, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_csf.tsv"), delim='\t', csfdf)

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_ec_abundance.tsv")),
             $(joinpath(outpath, "kids_csf.tsv")),
             $(joinpath(outpath, "ec__csf_age_ses_bf_birth")))
""";
```

#### Cognitive Assessments


```julia
# Bayleys doesn't have a compositve score calculated, but we can get it:
kidsmeta[:bayleysComposite] = map(row->
    mean([row[:languageComposite], row[:motorComposite]]),
    eachrow(kidsmeta))

kidsmeta[:cogScore] = Vector{Union{Float64,Missing}}(missing, size(kidsmeta,1))
kidsmeta[:cogAssessment] = Vector{Union{String,Missing}}(missing, size(kidsmeta,1))

map(enumerate(eachrow(kidsmeta))) do (i, row)
    # get just the cognitive assessment columns
    cogs = row[[
                :mullen_EarlyLearningComposite,
                :fullScaleComposite, # this is from WSSPI
                :FSIQ_Composite, # this is from WISC
                :bayleysComposite
            ]]
    # if there's no score, skip row
    all(ismissing, cogs) && return
    # otherwise, get the first non-missing value (no timepoints have multiple scores)
    col = findall(!ismissing, cogs)
    let assessment = col[1]
        if assessment == :mullen_EarlyLearningComposite
            assessment = "Mullen"
        elseif assessment == :fullScaleComposite
            assessment = "WSSPI"
        elseif assessment == :FSIQ_Composite
            assessment = "WISC"
        else assessment == :bayleysComposite
            assessment = "Bayleys"
        end

        kidsmeta[i, :cogAssessment] = assessment
        kidsmeta[i, :cogScore] = cogs[col[1]]
    end
end

describe(kidsmeta[:cogScore])
describe(kidsmeta[:cogAssessment])
```

```julia; results="hidden"
cogdf = view(kidsmeta, [:sample, :cogScore, :motherSES, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_cog.tsv"), delim='\t', cogdf)

R"""
Maaslin2(
     $(joinpath(outpath, "kids_ec_abundance.tsv")),
     $(joinpath(outpath, "kids_cog.tsv")),
     $(joinpath(outpath, "ec__cog_age_ses_bf_birth")))
""";

```
