# Miscellaneous work to prep for paper

## Miscellaneous figure plotting

```julia
using ECHOAnalysis
using Microbiome
using StatsPlots
using CSV
using DataFrames
using ColorBrewer

(outpath, figures) = notebookpaths!(9)

sp_perm = CSV.read("data/notebooks/06/permanovas.csv")
gf_perm = CSV.read("data/notebooks/08/genefamilies_permanovas.csv")
ec_perm = CSV.read("data/notebooks/08/ecs_permanovas.csv")

allperm = vcat(sp_perm, gf_perm, ec_perm)
filter!(row-> row[:variable] != "Subject ID", allperm)
sort!(allperm, :R2)
allperm[:perc] = allperm[:R2] .* 100
allperm[:variable] = map(v-> replace(v, " lafed"=>"formulafed"), allperm[:variable])

xs = filter(row-> row[:feature] == "species", allperm)[:variable]

@df allperm groupedbar(:perc, group=:feature, yticks=0:10, legend=:topleft,
  color=ColorBrewer.palette("Set2", 3)',
  xticks=(1:13, xs), xrotation=45)

plot!(title="PERMANOVAs",
  ylabel="% Variance explainable")
```
```julia
savefig(joinpath(figures, "all_permanovas.svg"))
CSV.write(joinpath(outpath, "all_permanovas.csv"), allperm)
```


## Top tax heatmap

```julia; echo=false; results="hidden"
using ECHOAnalysis
using Microbiome
using StatsPlots
using CSV
using DataFrames
using ColorBrewer
using BiobakeryUtils
using Clustering
using Distances

(outpath, figures) = notebookpaths!(9)
```
```julia
tax = load_taxonomic_profiles()
taxfilter!(tax)

abt = abundancetable(tax)
relativeabundance!(abt)
meta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(abt)));
```
```julia
kids = view(abt, sites=firstkids(samplenames(abt)))
meta = load_metadata(datatoml, samples=resolve_sampleID.(samplenames(kids)));

kidsocc = kidsoccurrences(kids)
kidsprev = [prevalence(kidsocc[x,:]) for x in 1:size(kidsocc, 1)]
kidsavgabund = [sum(kidsocc[x,:][kidsocc[x,:] .> 0]) / size(kidsocc,1) for x in 1:size(kidsocc, 1)]
kidsmaxabund = [maximum(kidsocc[x,:]) for x in 1:size(kidsocc, 1)]

ykids = view(kids, sites=map(a-> !ismissing(a) && a / 365 < 2, meta[:correctedAgeDays]))

ykidsocc = ykidsoccurrences(ykids)
ykidsprev = [prevalence(ykidsocc[x,:]) for x in 1:size(ykidsocc, 1)]
ykidsavgabund = [sum(ykidsocc[x,:][ykidsocc[x,:] .> 0]) / size(ykidsocc,1) for x in 1:size(ykidsocc, 1)]
ykidsmaxabund = [maximum(ykidsocc[x,:]) for x in 1:size(ykidsocc, 1)]
```

```julia

kidstop = featurenames(kids)[]

```



## Relabel Functional Profiles

```julia
using BiobakeryUtils

gf_ecs = CSV.read(
          "data/notebooks/08/ec__cog_age_ses_bf_birth/all_results.tsv",
          delim='\t')

humann2_rename(gf_ecs[2:end])
```
