---
title: "Notebook 3: Metadata Analysis"
author: "Kevin Bonham, PhD"
options:
    line_width : 120
    wrap : false
---

## Getting Data

Now that we have the metadata in long form,
it's a bit easier to query it for the stuff we want.
I'm using the macros available from the [DataFramesMeta](https://github.com/JuliaData/DataFramesMeta.jl) package.

```julia; echo=false; results="hidden"
ENV["GKSwstype"] = "100"
using ECHOAnalysis
using DataFrames
using DataFramesMeta
using StatsPlots
using PrettyTables

rounder = Dict(0 => (v,i) -> typeof(v) <: AbstractFloat ? round(v,digits=3) : v)
@ptconf formatter = rounder nosubheader=true screen_size=(20,120)

outpath, figures = notebookpaths!(3)
allmeta = load_metadata(datatoml)
```

As an example, how many unique subjects
do we have any metadata for?

```julia
@linq allmeta |>
    select(:studyID) |>
    unique |> nrow
```

(**Note**: most of these subjects have not provided fecal samples)

Or, how many subjects have at least one fecal sample?

```julia
sampleinfo = @linq allmeta |>
    where(:metadatum .== "CollectionRep") |>
    by(:studyID, nsamples = length(:studyID))

@pt randrows(sampleinfo)
```

```julia
histogram(sampleinfo.nsamples, legend=false,
    title="Samples per Subject ID",
    xlabel="# of fecal samples", ylabel="# of subjects")
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "03-samples-per-subject.png"))
```

Wow - there are a couple of subjects that have a lot of samples.
Taking a look to see what's going on there:

```julia
# Which subjects are those?
highsamplers = @linq allmeta |>
    where(:metadatum .== "CollectionRep") |>
    by(:studyID, nsamples = length(:studyID)) |>
    where(:nsamples .>= 5) |>
    select(:studyID, :nsamples)

@pt randrows(highsamplers)
```

## Metagenomes

At this stage, what I care about are samples with metagenomes,
which are inidcated by the `DOM` metadatum.
To find all of the studyID/timepoint combos that have sequenced metagenomes:

```julia
# filter on metagenomes (DOM = "Date of Metagenome")
highsamplers = @linq filter(r-> r[:studyID] in highsamplers.:studyID, allmeta) |>
    where(:metadatum .== "DOM") |>
    where(:value .!== missing) |>
    orderby(:studyID, :timepoint)

@pt highsamplers
```

So a bunch of these are where
multiple samples were given for the same timepoint (eg `C0202_4F_1A` and `_2A`)
and/or both genotek and enthanol samples.

_Note_: after `batch006`, SOP is to send 1 `ALiquotRep` of 1 `CollectionRep` for
each `timepoint` (i.e. only send `C0202_4F_1A` for mgx sequencing, not `C0202_4F_2A`
or `C0202_4F_1B` or `C0202_4E_1A`) unless otherwise noted.

```julia
mgxsamples = @linq allmeta |>
    where(:metadatum .== "DOM") |>
    select(:studyID, :timepoint) |>
    unique

sort!(mgxsamples, :studyID);
@pt mgxsamples
```

And we can get metadata for these samples using the `getfocusmetadata` function,
which converts the longform data into a wide table
with one row per subject/timepoint pair.
Metadata from "timpoint 0" (that is, non time-dependent data)
is added to every row for that subject.

```julia
samples = map(row-> (subject=row[:studyID], timepoint=row[:timepoint]), eachrow(mgxsamples))
focus = getfocusmetadata(allmeta, samples)
sort!(focus, [:subject, :timepoint])
@pt randrows(focus)
```
