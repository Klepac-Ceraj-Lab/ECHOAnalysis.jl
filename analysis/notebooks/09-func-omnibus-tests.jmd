---
title: "Notebook 9: Functional Profile Omnibus Tests"
author: "Kevin Bonham, PhD"
options:
    line_width : 120
    wrap : false
---

```julia; echo=false; results="hidden"
using ECHOAnalysis
using Microbiome
using BiobakeryUtils
using StatsPlots
using DataFrames
using Distances
using CSV

(outpath, figures) = notebookpaths!(9)
```




```julia
udm = pairwise(BrayCurtis(), uabt, dims=2)
perm = permanova(udm, [startswith(s, "M") ? "mom" : "kid" for s in samplenames(uabt)])
perm[!,:feature] .= "kos"
perm[!,:variable] .= "Subject Type"
```

```julia
kids_dm = pairwise(BrayCurtis(), kids, dims=2)

p = permanova(kids_dm, kidsmeta.correctedAgeDays, filter=.!ismissing.(kidsmeta.correctedAgeDays))
p[!,:feature] .= "kos"
p[!, :variable] .= "Age"
perm = vcat(perm, p)

kidsmeta.birthType = Vector{Union{Missing,String}}(kidsmeta.birthType)
p = permanova(kids_dm, kidsmeta.birthType, filter=.!ismissing.(kidsmeta.birthType))
p[!,:feature] .= "kos"
p[!, :variable] .= "birthType"
perm = vcat(perm, p)

kidsmeta[!, :breastfed] = breastfeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta.breastfed)
p[!,:feature] .= "kos"
p[!, :variable] .= "breastfed"
perm = vcat(perm, p)

kidsmeta.formulafed = formulafeeding.(eachrow(kidsmeta))
p = permanova(kids_dm, kidsmeta.formulafed)
p[!,:feature] .= "kos"
p[!, :variable] .= "formulafed"
perm = vcat(perm, p)

kidsmeta.childGender = Vector{Union{Missing,String}}(kidsmeta.childGender)
p = permanova(kids_dm, kidsmeta.childGender, filter=.!ismissing.(kidsmeta.childGender))
p[!,:feature] .= "kos"
p[!, :variable] .= "childGender"
perm = vcat(perm, p)

p = permanova(kids_dm, kidsmeta.mother_HHS, filter=.!ismissing.(kidsmeta.mother_HHS))
p[!,:feature] .= "kos"
p[!, :variable] .= "mother_HHS"
perm = vcat(perm, p)
filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)
@pt perm
```

### Young kids

```julia; results="hidden"
# get kids that are less than 1.5 years old
young = map(a-> !ismissing(a) && a <= 365*1.5, kidsmeta.correctedAgeDays)
youngkids = view(kids, sites=young)

# make new distance matrix
youngkids_dm = pairwise(BrayCurtis(), youngkids, dims=2,)
youngkidsmeta = kidsmeta[young, :]

# Test breasfeeding and formula feeding
p = permanova(youngkids_dm, youngkidsmeta.breastfed, 10000)
p[!, :feature] .= "kos"
p[!, :variable] .= "young kids breastfed"
perm = vcat(perm, p)

p = permanova(youngkids_dm, youngkidsmeta.formulafed, 10000)
p[!, :feature] .= "kos"
p[!, :variable] .= "young kids formulafed"
perm = vcat(perm, p)

filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)
@pt perm
```

```julia
using RCall

filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:white_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :white_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ white_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]

p[!,:feature] .= "kos"
p[!, :variable] .= "white_matter_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## grey matter
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:grey_matter_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :grey_matter_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ grey_matter_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[!,:feature] .= "kos"
p[!, :variable] .= "grey_matter_volume"
perm = vcat(perm, p[[2],:])
```

```julia
## CSF
filt = map(row-> !ismissing(row[:correctedAgeDays]) && !ismissing(row[:csf_volume]), eachrow(kidsmeta))
r_meta = kidsmeta[filt, [:correctedAgeDays, :csf_volume]]
r_dm = kids_dm[filt,filt]
@rput r_meta
@rput r_dm

R"""
p <- adonis(r_dm ~ csf_volume + correctedAgeDays,
            method = "bray", data=r_meta, permutations = 10000)
"""

@rget p
p = p[:aov_tab]
p[!,:feature] .= "kos"
p[!, :variable] .= "csf_volume"
perm = vcat(perm, p[[2],:])
```
```julia
## Cognitive Assessment

using Statistics
# Bayleys doesn't have a compositve score calculated, but we can get it:
kidsmeta.bayleysComposite = map(row->
    mean([row[:languageComposite], row[:motorComposite]]),
    eachrow(kidsmeta))

kidsmeta.cogScore = Vector{Union{Float64,Missing}}(missing, size(kidsmeta,1))
kidsmeta.cogAssessment = Vector{Union{String,Missing}}(missing, size(kidsmeta,1))

map(enumerate(eachrow(kidsmeta))) do (i, row)
    # get just the cognitive assessment columns
    cogs = row[[
                :mullen_EarlyLearningComposite,
                :fullScaleComposite, # this is from WSSPI
                :FSIQ_Composite, # this is from WISC
                :bayleysComposite
            ]]
    # if there's no score, skip row
    all(ismissing, cogs) && return
    # otherwise, get the first non-missing value (no timepoints have multiple scores)
    col = findall(!ismissing, cogs)
    let assessment = col[1]
        if assessment == :mullen_EarlyLearningComposite
            assessment = "Mullen"
        elseif assessment == :fullScaleComposite
            assessment = "WSSPI"
        elseif assessment == :FSIQ_Composite
            assessment = "WISC"
        else assessment == :bayleysComposite
            assessment = "Bayleys"
        end

        kidsmeta[i, :cogAssessment] = assessment
        kidsmeta[i, :cogScore] = cogs[col[1]]
    end
end

p = permanova(kids_dm, kidsmeta.cogScore, filter=.!ismissing.(kidsmeta.cogScore))
p[!,:feature] .= "kos"
p[!, :variable] .= "cogScore"
perm = vcat(perm, p);
```


```julia
okids = view(kids, sites=map(s-> !ismissing(s) && s > 365*2, kidsmeta.correctedAgeDays))
okidsmeta = view(kidsmeta, map(s-> !ismissing(s) && s > 365*2, kidsmeta.correctedAgeDays), :)
okids_dm = pairwise(BrayCurtis(), okids)

p = permanova(okids_dm, okidsmeta.cogScore, filter=.!ismissing.(okidsmeta.cogScore))
p[!,:feature] .= "kos"
p[!, :variable] .= "old kids cogScore"
perm = vcat(perm, p)

p = permanova(okids_dm, okidsmeta.csf_volume, filter=.!ismissing.(okidsmeta.csf_volume))
p[!,:feature] .= "kos"
p[!, :variable] .= "old kids csf_volume"
perm = vcat(perm, p)

p = permanova(okids_dm, okidsmeta.grey_matter_volume, filter=.!ismissing.(okidsmeta.grey_matter_volume))
p[!,:feature] .= "kos"
p[!, :variable] .= "old kids grey_matter_volume"
perm = vcat(perm, p)

p = permanova(okids_dm, okidsmeta.white_matter_volume, filter=.!ismissing.(okidsmeta.white_matter_volume))
p[!,:feature] .= "kos"
p[!, :variable] .= "old kids white_matter_volume"
perm = vcat(perm, p)
filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)
@pt perm[end-5:end,:]
```


```julia
using MultipleTesting

filter!(r-> !ismissing(r[Symbol("Pr(>F)")]), perm)

perm.p_value = Float64.(perm[Symbol("Pr(>F)")])
perm.q_value = adjust(perm.p_value, BenjaminiHochberg())
sort!(perm, :q_value)

# reorder columns
perm = perm[:,[:feature, :variable, :R2, :p_value, :q_value]]
CSV.write(joinpath(outpath, "genefamilies_permanovas.csv"), perm)
```

```julia
using StatsPlots

sort!(perm, [:R2])

bar(perm.R2 .* 100,
    xticks=(1:(size(perm,1)-1), perm.variable),
    xrotation=45, color=:grey)

for i in eachindex(perm.R2)
    r2 = perm[i, :R2] * 100
    q = perm[i, :q_value]
    kind = perm.variable
    if q > 0.05
        continue
    elseif q > 0.01
        stars = "*"
    elseif q > .001
        stars = "**"
    else
        stars = "***"
    end
    annotate!(i, r2+.1, text(stars, :center))
end

plot!(legend=false, title="Function Profiles (kos) PERMANOVA",
    ylabel="% Variance explainable")
```

```julia
savefig(joinpath(figures, "kos_permanovas.svg"))
```
