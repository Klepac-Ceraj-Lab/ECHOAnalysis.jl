---
title: "Notebook 10: Functional Profiles Per-feature tests"
author: "Kevin Bonham, PhD"
options:
    line_width : 120
    wrap : false
---

```julia; echo=false; results="hidden"
ENV["GKSwstype"] = "100"

using ECHOAnalysis
using DataFrames
using PrettyTables
using Statistics
using Distances
using Microbiome
using MultivariateStats
using StatsPlots
using MicrobiomePlots
using BiobakeryUtils
using Clustering
using CSV

rounder = Dict(0 => (v,i) -> typeof(v) <: AbstractFloat ? round(v,digits=3) : v)
@ptconfclean # clear previous configuration
@ptconf formatter = rounder nosubheader=true screen_size=(20,120)

(outpath, figures) = notebookpaths!(10)
```

Because there are so many gene functions,
we'll do some agressive filtering for
prevalence and abundance.
```julia; results="hidden"
kos = CSV.read("data/engaging/merged/batch1-10_kos_names.csv")
names!(kos, map(n-> Symbol(resolve_sampleID(replace(String(n), "_Abundance-RPKs"=>"")).sample), names(kos)))
# ~ 5% prevalence filter
kos = kos[map(row-> sum(x-> x > 0, row[Not(1)]) > ncol(kos) * .05, eachrow(kos)), :]
kos = abundancetable(kos)
relativeabundance!(kos)
```

```julia
allsamples = resolve_sampleID.(samplenames(kos))
uabt = view(kos, sites=getfield.(uniquesamples(allsamples, takefirst=true), :sample))
dm = pairwise(BrayCurtis(), uabt, dims=2)

usamples = resolve_sampleID.(samplenames(uabt))
metadata = load_metadata(datatoml, samples=usamples)
uniquekids = uniquesamples(resolve_sampleID.(samplenames(uabt)), samplefilter=x-> startswith(x, "C"), identifiers=[:subject])
kids = view(uabt, sites=getfield.(uniquekids, :sample))
kids_dm = pairwise(BrayCurtis(), kids, dims=2)

focusmeta = load_metadata(datatoml, samples=uniquekids)

```

```julia
prevfilt = let occ = occurrences(kids)
    # between 5% and 80% of samples have at least 0.0001% abundance
    [0.05 < prevalence(occ[i, :], 1e-6) < 0.8 for i in 1:size(occ, 1)]
end

prev = view(kids, species=prevfilt)

kodf = DataFrame(EC=featurenames(prev))

let occ = occurrences(prev)
    for (i, sample) in enumerate(samplenames(prev))
        ismissing(kidsmeta[i, :birthType]) && continue
        # Make a column for each sample
        kodf[!, Symbol(sample)] = occ[:, i]
    end
end

kodf[!,1] = map(s-> replace(s, r"[^\w]"=>"."), kodf[!,1])
```

First, we'll use `Maaslin2` from the Huttenhower lab.
To do this, we need to first save the abundance table
and the metadata we want to include in the model.
The abundance table will have features (kos) as rows and samples as columns,
while the metadata will have features (metadata) as columns and samples as rows.

All of our models will take the form

```
kos abundance ~ {Brain data} + age + mother_HHS + breastfed + birthType
```

Where `{Brain data}` is a brain volume measure or cognitive score.

`Maaslin2` doesn't play nice with missing categorical data,
so I'll manually remove samples that don't have `birthType` information

```julia
kos = DataFrame(kos=speciesnames(kids))

let occ = occurrences(kids)
    for (i, sample) in enumerate(samplenames(kids))
        ismissing(focusmeta[i, :birthType]) && continue
        # Make a column for each sample
        kos[!,Symbol(sample)] = occ[:, i]
    end
end
```

In addition, we want the brain volumes to be normalized
by the total brain volume.

```julia; results="hidden"
focusmeta.total_lowres = map(row-> sum(row[[:csf_volume, :white_matter_volume, :grey_matter_volume]]), eachrow(focusmeta))
focusmeta.csf_normed = focusmeta.csf_volume ./ focusmeta.total_lowres
focusmeta.white_matter_normed = focusmeta.white_matter_volume ./ focusmeta.total_lowres
focusmeta.grey_matter_normed = focusmeta.grey_matter_volume ./ focusmeta.total_lowres

focusmeta.cerebellar_normed = focusmeta.cerebellar ./ focusmeta.hires_total
focusmeta.subcortical_normed = focusmeta.subcortical ./ focusmeta.hires_total
focusmeta.neocortical_normed = focusmeta.neocortical ./ focusmeta.hires_total
focusmeta.limbic_normed = focusmeta.limbic ./ focusmeta.hires_total

```

Now we'll subset the metadata `DataFrame` to include a subset of the metadata.
First, we'll fit a linear model with no brain measurements.

```julia
# add a sample id column
focusmeta.sample = collect(samplenames(kids))
focusmeta.breastfed = map(breastfeeding, eachrow(focusmeta))
dropmissing!(focusmeta, :birthType)

# view() does not create a new dataframe, but allows us to subset it.
covariatedf = view(focusmeta, :, [:sample, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])

# Maaslin2 also wants tab separated values
CSV.write(joinpath(outpath, "kids_kos_abundance.tsv"), delim='\t', kos)
CSV.write(joinpath(outpath, "kids_covariates.tsv"), delim='\t', covariatedf)

@pt covariatedf
```

Now, we'll run `Maaslin2` using `RCall.jl`.
You need to have `Maaslin2` installed for this to work - [see here](https://bitbucket.org/biobakery/maaslin2/src/default/#markdown-header-installation)

```julia; results="hidden"
using RCall

R"library(Maaslin2)"
let version = R"packageVersion('Maaslin2')"
    println(version)
end
```

```julia; results="hidden"
# Model: kos abundance ~ age + mother_HHS + breastfed + birthType

R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_kos_abundance.tsv")),
            $(joinpath(outpath, "kids_covariates.tsv")),
            $(joinpath(outpath, "species__age_ses_bf_birth")))
"""
```

The results from this run can be found in `data/notebooks/07/species__wm_age_ses_bf_birth/`

We can do this with brain data as well:

```julia; results="hidden"
whitematterdf = view(focusmeta, :, [:sample, :white_matter_normed, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_white_matter.tsv"), delim='\t', whitematterdf)

# Model: kos abundance ~ white_matter_normed + age + mother_HHS + breastfed + birthType
R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_kos_abundance.tsv")),
            $(joinpath(outpath, "kids_white_matter.tsv")),
            $(joinpath(outpath, "species__wmNorm_age_ses_bf_birth")))
"""
```

```julia; results="hidden"
greymatterdf = view(focusmeta, :, [:sample, :grey_matter_normed, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_grey_matter.tsv"), delim='\t', greymatterdf)

# Model: kos abundance ~ grey_matter_normed + age + mother_HHS + breastfed + birthType

R"""
fit_data <- Maaslin2(
            $(joinpath(outpath, "kids_kos_abundance.tsv")),
            $(joinpath(outpath, "kids_grey_matter.tsv")),
            $(joinpath(outpath, "species__gmNorm_age_ses_bf_birth")))
"""

csfdf = view(focusmeta, :, [:sample, :csf_normed, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_csf.tsv"), delim='\t', csfdf)

# Model: kos abundance ~ csf_normed + age + mother_HHS + breastfed + birthType

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_kos_abundance.tsv")),
             $(joinpath(outpath, "kids_csf.tsv")),
             $(joinpath(outpath, "species__csfNorm_age_ses_bf_birth")))
"""

cerebellardf = view(focusmeta, :, [:sample, :cerebellar_normed, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_cerebellar.tsv"), delim='\t', cerebellardf)

# Model: kos abundance ~ cerebellar_normed + age + mother_HHS + breastfed + birthType

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_kos_abundance.tsv")),
             $(joinpath(outpath, "kids_cerebellar.tsv")),
             $(joinpath(outpath, "species__cerebellarNorm_age_ses_bf_birth")))
"""


subcorticaldf = view(focusmeta, :, [:sample, :subcortical_normed, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_subcortical.tsv"), delim='\t', subcorticaldf)

# Model: kos abundance ~ subcortical_normed + age + mother_HHS + breastfed + birthType

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_kos_abundance.tsv")),
             $(joinpath(outpath, "kids_subcortical.tsv")),
             $(joinpath(outpath, "species__subcorticalNorm_age_ses_bf_birth")))
"""

neocorticaldf = view(focusmeta, :, [:sample, :neocortical_normed, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_neocortical.tsv"), delim='\t', neocorticaldf)

# Model: kos abundance ~ neocortical_normed + age + mother_HHS + breastfed + birthType

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_kos_abundance.tsv")),
             $(joinpath(outpath, "kids_neocortical.tsv")),
             $(joinpath(outpath, "species__neocorticalNorm_age_ses_bf_birth")))
"""

limbicdf = view(focusmeta, :, [:sample, :limbic_normed, :correctedAgeDays, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_limbic.tsv"), delim='\t', limbicdf)

# Model: kos abundance ~ limbic_normed + age + mother_HHS + breastfed + birthType

R"""
fit_data <- Maaslin2(
             $(joinpath(outpath, "kids_kos_abundance.tsv")),
             $(joinpath(outpath, "kids_limbic.tsv")),
             $(joinpath(outpath, "species__limbicNorm_age_ses_bf_birth")))
"""

```

Again, the results from these Maaslin2 runs can be found in `data/notebooks/07/`.

## Cognitive Assessments


```julia; results="hidden"
cogdf = view(focusmeta, :, [:sample, :cogScore, :mother_HHS, :breastfed, :birthType])
CSV.write(joinpath(outpath, "kids_cog.tsv"), delim='\t', cogdf)

R"""
Maaslin2(
     $(joinpath(outpath, "kids_kos_abundance.tsv")),
     $(joinpath(outpath, "kids_cog.tsv")),
     $(joinpath(outpath, "species__cog_age_ses_bf_birth")))
"""
```
